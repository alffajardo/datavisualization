install.packages(Funmodeling)
"funModeling"
install.packages("Funmodeling")
install.packages("funModeling")
install.packages("lsr")
isntall.packages("swirl")
install.packages("swirl")
install.packages("psych")
library(psych)
install.packages("XLConnect")
library(XLConnect)
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
Share this:
Click to share on Twitter (Opens in new window)Click to share on Facebook (Opens in new window)Click to share on LinkedIn (Opens in new window)Click to share on Google+ (Opens in new window)Click to share on WhatsApp (Opens in new window)Click to email this to a friend (Opens in new window)
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
install.packages("magritter")
install.packages("magrittr")
library(magrittr)
library(ggplot2)
opt = theme(legend.position  = "none",
panel.background = element_rect(fill="violetred4"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from=-10, to=10, by = 0.05) %>%
expand.grid(x=., y=.) %>%
#HERE COMES THE KIDNAPPED LINE
geom_point(alpha=.1, shape=20, size=1, color="white") + opt
library(magrittr)
library(ggplot2)
opt = theme(legend.position  = "none",
panel.background = element_rect(fill="violetred4"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from=-10, to=10, by = 0.05) %>%
expand.grid(x=., y=.) %>%
#HERE COMES THE KIDNAPPED LINE
geom_point(alpha=.1, shape=20, size=1, color="white") + opt
library(magrittr)
library(ggplot2)
opt = theme(legend.position  = "none",
panel.background = element_rect(fill="violetred4"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from=-10, to=10, by = 0.05) %>%
expand.grid(x=., y=.) %>%
#HERE COMES THE KIDNAPPED LINE
geom_point(aes(alpha=.1, shape=20, size=1, color="white") + opt
)
library("magrittr")
library("ggplot2")
library("pracma")
RecurrencePlot = function(from, to, col1, col2) {
opt = theme(legend.position  = "none",
panel.background = element_blank(),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from, to, by = .1) %>% expand.grid(x=., y=.) %>%
ggplot( ., aes(x=x, y=y, fill=erf(sec(x)-sec(y)))) + geom_tile() +
scale_fill_gradientn(colours=colorRampPalette(c(col1, col2))(2)) + opt}
RecurrencePlot(from = -5*pi, to = 5*pi, col1 = "black", col2= "white")
install.packages("pracma")
library("magrittr")
library("ggplot2")
library("pracma")
RecurrencePlot = function(from, to, col1, col2) {
opt = theme(legend.position  = "none",
panel.background = element_blank(),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from, to, by = .1) %>% expand.grid(x=., y=.) %>%
ggplot( ., aes(x=x, y=y, fill=erf(sec(x)-sec(y)))) + geom_tile() +
scale_fill_gradientn(colours=colorRampPalette(c(col1, col2))(2)) + opt}
RecurrencePlot(from = -5*pi, to = 5*pi, col1 = "black", col2= "white")
library(robustbase)
library(robustbase)
Animals2
libary(tidyverse)
library(tidyverse)
library(tidyverse)
Animals2
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_bar()
ggplot(data= Animals2, mapping = aes(y=brain))+
geom_bar()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point()+
scale_x_log10()+
scale_y_log10()
ggplot(data= Animals2, mapping = aes(x=body,y=brain),size = 2, col = "blue")+
geom_point()+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain),size = 2, col = "blue")+
geom_point()+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain),size = 5, col = "blue")+
geom_point()+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size = 2)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size = 5)+
scale_x_log10()+
scale_y_log10()
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = A)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = "A")+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = "B")+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = 1)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = 3)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = 17)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =3 , shape = 17)+
scale_x_log10()+
scale_y_log10()
library(tidyverse)
datos <- read.csv("EXR_C07_S04_03.csv")
datos
treatment  <- factor( c(rep(1,11),rep(2,11)),
labels = c("Placebo","Methadone"))
score <- c(datos$Plac,datos$Meth)
datos2 <- data.frame(treatment,score)
datos2
variance_test <- var.test(datos2$score[datos2$treatment=="Placebo"],datos2$score[datos2$treatment =="Methadone"])
variance_test
ggplot(data = datos2,
mapping = aes(x=treatment,y=score))+
geom_boxplot()+
geom_point()+
geom_jitter(height = 0.03,width = 0.03)
comparison <- t.test(score~treatment,data = datos2,paired=T)
comparison
getwd()
condA <- rep("CondA",10)
condB <- rep("CondB",10)
CondB <- rep("CondC",10)
CondC <- rep("CondC",10)
adata <- rnorm(10,15,3)
bdata <- rnorm(10,18.5,2)
cdata -> rnorm(10,25,4)
cdata <-  rnorm(10,25,4)
cond <- c(condA,condB,CondC)
score <- c(adata,bdata,cdata)
data <- data.frame(cond,score)
data
aov(score~cond, data= data)
anova(aov(score~cond, data= data))
TukeyHSD(aov(score~cond, data = data))
plot(data$cond,data$score)
plot(data$cond,data$score,type=h)
plot(data$cond,data$score,type="n")
plot(data$score,type="n")
axis(1,at=1:3,lab=c("pre","post","test"))
axis(1, at=1:3 ,lab=c("pre","post","test"))
plot(data$score,type="n",xaxt='n')
axis(1, at=1:3 ,lab=c("pre","post","test"))
plot(as.numeric(data$cond),data$score)
plot(as.numeric(data$score),type="n",xaxt='n',)
axis(1, at=1:3 ,lab=c("pre","post","test"))
plot(as.numeric(data$score),type="n",xaxt=c("Pre,"Post","Test"))
plot(as.numeric(data$score),type="n",xaxt='n'
)
plot(as.numeric(data$cond),data$score,type="n",xaxt='n')
axis(1,labels = as.character(data$cond),at=as.numeric(data$cond))
plot(as.numeric(data$cond),data$score,type="l",xaxt='n')
axis(1,labels = as.character(data$cond),at=as.numeric(data$cond))
plot(as.numeric(data$cond),data$score,type="n",xaxt='n')
points(data$cond,data$score)
source('~/.active-rstudio-document', echo=TRUE)
data2 <- data.frame(data$score[data$cond=="CondA"]data$score[data$cond=="CondB"],CondC)
data2 <- data.frame(data$score[data$cond=="CondA"],data$score[data$cond=="CondB"],Cdata$score[data$cond=="CondC"])
data2 <- data.frame(data$score[data$cond=="CondA"],data$score[data$cond=="CondB"],data$score[data$cond=="CondC"])
setwd("GitHub/datavisualzation/")
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl, gears = mtcars$gear),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
myData <- do.call(data.frame, myData)
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) <- c("cyl", "gears", "mean", "sd", "n", "se")
myData$names <- c(paste(myData$cyl, "cyl /",
myData$gears, " gear"))
?tapply
tapply(myData$mean, list(myData$cyl, myData$gears),
function(x) c(x = x))
myData$mean
myData
tabbedMeans <- tapply(myData$mean, list(myData$cyl,
myData$gears),
function(x) c(x = x))
tabbedSE <- tapply(myData$se, list(myData$cyl,
myData$gears),
function(x) c(x = x))
tabbedSE
tabbedMeans
barCenters <- barplot(height = tabbedMeans,
beside = TRUE, las = 1,
ylim = c(0, plotTop),
cex.names = 0.75,
main = "Mileage by No. Cylinders and No. Gears",
ylab = "Miles per Gallon",
xlab = "No. Gears",
border = "black", axes = TRUE,
legend.text = TRUE,
args.legend = list(title = "No. Cylinders",
x = "topright",
cex = .7))
plotTop <- max(myData$mean) +
myData[myData$mean == max(myData$mean), 6] * 3 # usful to set y limits
barCenters <- barplot(height = tabbedMeans,
beside = TRUE, las = 1,
ylim = c(0, plotTop),
cex.names = 0.75,
main = "Mileage by No. Cylinders and No. Gears",
ylab = "Miles per Gallon",
xlab = "No. Gears",
border = "black", axes = TRUE,
legend.text = TRUE,
args.legend = list(title = "No. Cylinders",
x = "topright",
cex = .7))
egments(barCenters, tabbedMeans - tabbedSE * 2, barCenters,
tabbedMeans + tabbedSE * 2, lwd = 1.5)
segments(barCenters, tabbedMeans - tabbedSE * 2, barCenters,
tabbedMeans + tabbedSE * 2, lwd = 1.5)
arrows(barCenters, tabbedMeans - tabbedSE * 2, barCenters,
tabbedMeans + tabbedSE * 2, lwd = 1.5, angle = 90,
code = 3, length = 0.05)
dev.off()
par(mar = c(5, 6, 4, 5) + 0.1)
plotTop <- max(myData$mean) +
myData[myData$mean == max(myData$mean), 6] * 3 # usful to set y limits
barCenters <- barplot(height = tabbedMeans,
beside = TRUE, las = 1,
ylim = c(0, plotTop),
cex.names = 0.75,
main = "Mileage by No. Cylinders and No. Gears",
ylab = "Miles per Gallon",
xlab = "No. Gears",
border = "black", axes = TRUE,
legend.text = TRUE,
args.legend = list(title = "No. Cylinders",
x = "topright",
cex = .7))
egments(barCenters, tabbedMeans - tabbedSE * 2, barCenters,
tabbedMeans + tabbedSE * 2, lwd = 1.5)
# Create a table summarizing variables (mean,sample size, and standard deviation)
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl, gears = mtcars$gear),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
# Transform into a data frame
myData <- do.call(data.frame, myData)
# compute standard error
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) <- c("cyl", "gears", "mean", "sd", "n", "se")
myData$names <- c(paste(myData$cyl, "cyl /",
myData$gears, " gear"))
# En el caso de que se quiera hacer una gráfica con barras agrupadas es mejor realizar una matrix con las medias. esto es facil de hacer con R de la siguiente forma:
tabbedMeans <- tapply(myData$mean, list(myData$cyl,
myData$gears),
function(x) c(x = x))
tabbedSE <- tapply(myData$se, list(myData$cyl,
myData$gears),
function(x) c(x = x))
# Graficamos las tablas generadas:
par(mar = c(5, 6, 4, 5) + 0.1)
plotTop <- max(myData$mean) +
myData[myData$mean == max(myData$mean), 6] * 3 # usful to set y limits
barCenters <- barplot(height = tabbedMeans,
beside = TRUE, las = 1,
ylim = c(0, plotTop),
cex.names = 0.75,
main = "Mileage by No. Cylinders and No. Gears",
ylab = "Miles per Gallon",
xlab = "No. Gears",
border = "black", axes = TRUE,
legend.text = TRUE,
args.legend = list(title = "No. Cylinders",
x = "topright",
cex = .7))
segments(barCenters, tabbedMeans - tabbedSE * 2, barCenters,
tabbedMeans + tabbedSE * 2, lwd = 1.5)
dev.off()
rm(list=ls())
# Create a table summarizing variables (mean,sample size, and standard deviation)
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl, gears = mtcars$gear),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
# Transform into a data frame
myData <- do.call(data.frame, myData)
# compute standard error
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) <- c("cyl", "gears", "mean", "sd", "n", "se")
myData$names <- c(paste(myData$cyl, "cyl /",
myData$gears, " gear"))
# En el caso de que se quiera hacer una gráfica con barras agrupadas es mejor realizar una matrix con las medias. esto es facil de hacer con R de la siguiente forma:
tabbedMeans <- tapply(myData$mean, list(myData$cyl,
myData$gears),
function(x) c(x = x))
tabbedSE <- tapply(myData$se, list(myData$cyl,
myData$gears),
function(x) c(x = x))
# Graficamos las tablas generadas:
par(mar = c(5, 6, 4, 5) + 0.1)
plotTop <- max(myData$mean) +
myData[myData$mean == max(myData$mean), 6] * 3 # usful to set y limits
barCenters <- barplot(height = tabbedMeans,
beside = TRUE, las = 1,
ylim = c(0, plotTop),
cex.names = 0.75,
main = "Mileage by No. Cylinders and No. Gears",
ylab = "Miles per Gallon",
xlab = "No. Gears",
border = "black", axes = TRUE,
legend.text = TRUE,
args.legend = list(title = "No. Cylinders",
x = "topright",
cex = .7))
segments(barCenters, tabbedMeans - tabbedSE * 2, barCenters,
tabbedMeans + tabbedSE * 2, lwd = 1.5)
