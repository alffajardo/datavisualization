install.packages(Funmodeling)
"funModeling"
install.packages("Funmodeling")
install.packages("funModeling")
install.packages("lsr")
isntall.packages("swirl")
install.packages("swirl")
install.packages("psych")
library(psych)
install.packages("XLConnect")
library(XLConnect)
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
Share this:
Click to share on Twitter (Opens in new window)Click to share on Facebook (Opens in new window)Click to share on LinkedIn (Opens in new window)Click to share on Google+ (Opens in new window)Click to share on WhatsApp (Opens in new window)Click to email this to a friend (Opens in new window)
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
f1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))
d1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)
p1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)
xt = function(t) exp(-d1*t)*sin(t*f1+p1)+exp(-d2*t)*sin(t*f2+p2)
yt = function(t) exp(-d3*t)*sin(t*f3+p3)+exp(-d4*t)*sin(t*f4+p4)
t=seq(1, 100, by=.001)
dat=data.frame(t=t, x=xt(t), y=yt(t))
with(dat, plot(x,y, type="l", xlim =c(-2,2), ylim =c(-2,2), xlab = "", ylab = "", xaxt='n', yaxt='n'))
install.packages("magritter")
install.packages("magrittr")
library(magrittr)
library(ggplot2)
opt = theme(legend.position  = "none",
panel.background = element_rect(fill="violetred4"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from=-10, to=10, by = 0.05) %>%
expand.grid(x=., y=.) %>%
#HERE COMES THE KIDNAPPED LINE
geom_point(alpha=.1, shape=20, size=1, color="white") + opt
library(magrittr)
library(ggplot2)
opt = theme(legend.position  = "none",
panel.background = element_rect(fill="violetred4"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from=-10, to=10, by = 0.05) %>%
expand.grid(x=., y=.) %>%
#HERE COMES THE KIDNAPPED LINE
geom_point(alpha=.1, shape=20, size=1, color="white") + opt
library(magrittr)
library(ggplot2)
opt = theme(legend.position  = "none",
panel.background = element_rect(fill="violetred4"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from=-10, to=10, by = 0.05) %>%
expand.grid(x=., y=.) %>%
#HERE COMES THE KIDNAPPED LINE
geom_point(aes(alpha=.1, shape=20, size=1, color="white") + opt
)
library("magrittr")
library("ggplot2")
library("pracma")
RecurrencePlot = function(from, to, col1, col2) {
opt = theme(legend.position  = "none",
panel.background = element_blank(),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from, to, by = .1) %>% expand.grid(x=., y=.) %>%
ggplot( ., aes(x=x, y=y, fill=erf(sec(x)-sec(y)))) + geom_tile() +
scale_fill_gradientn(colours=colorRampPalette(c(col1, col2))(2)) + opt}
RecurrencePlot(from = -5*pi, to = 5*pi, col1 = "black", col2= "white")
install.packages("pracma")
library("magrittr")
library("ggplot2")
library("pracma")
RecurrencePlot = function(from, to, col1, col2) {
opt = theme(legend.position  = "none",
panel.background = element_blank(),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
seq(from, to, by = .1) %>% expand.grid(x=., y=.) %>%
ggplot( ., aes(x=x, y=y, fill=erf(sec(x)-sec(y)))) + geom_tile() +
scale_fill_gradientn(colours=colorRampPalette(c(col1, col2))(2)) + opt}
RecurrencePlot(from = -5*pi, to = 5*pi, col1 = "black", col2= "white")
library(robustbase)
library(robustbase)
Animals2
libary(tidyverse)
library(tidyverse)
library(tidyverse)
Animals2
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_bar()
ggplot(data= Animals2, mapping = aes(y=brain))+
geom_bar()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point()+
scale_x_log10()+
scale_y_log10()
ggplot(data= Animals2, mapping = aes(x=body,y=brain),size = 2, col = "blue")+
geom_point()+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain),size = 2, col = "blue")+
geom_point()+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain),size = 5, col = "blue")+
geom_point()+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size = 2)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size = 5)+
scale_x_log10()+
scale_y_log10()
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = A)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = "A")+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = "B")+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = 1)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = 3)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =2 , shape = 17)+
scale_x_log10()+
scale_y_log10()
library(robustbase)
library(tidyverse)
Animals2
ggplot(data= Animals2, mapping = aes(x=body,y=brain))+
geom_point(size =3 , shape = 17)+
scale_x_log10()+
scale_y_log10()
library(tidyverse)
datos <- read.csv("EXR_C07_S04_03.csv")
datos
treatment  <- factor( c(rep(1,11),rep(2,11)),
labels = c("Placebo","Methadone"))
score <- c(datos$Plac,datos$Meth)
datos2 <- data.frame(treatment,score)
datos2
variance_test <- var.test(datos2$score[datos2$treatment=="Placebo"],datos2$score[datos2$treatment =="Methadone"])
variance_test
ggplot(data = datos2,
mapping = aes(x=treatment,y=score))+
geom_boxplot()+
geom_point()+
geom_jitter(height = 0.03,width = 0.03)
comparison <- t.test(score~treatment,data = datos2,paired=T)
comparison
source('~/GitHub/proyecto_RS/graph_generator.R')
mtcars
getwd()
setd("GitHub/datavisualzation/")
sewtd("GitHub/datavisualzation/")
setwd("GitHub/datavisualzation/")
# generate frequency table
counts <- table(mtcars$gear)
# plot the frequency tabel
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
counts
mtcars$gear
# generate frequency table
counts <- table(mtcars$gear)
# plot the frequency tabel
barplot(counts, main="Car Distribution", horiz = T
xlab="Number of Gears")
# generate frequency table
counts <- table(mtcars$gear)
# plot the frequency tabel
barplot(counts, main="Car Distribution", horiz = T,
xlab="Number of Gears")
par(2,1)
par(mfrow=c(2,1)
)
png("simple_barplots.png")
# generate frequency table
counts <- table(mtcars$gear)
# plot the frequency tabel
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
# generate frequency table
counts <- table(mtcars$gear)
# plot the frequency tabel
barplot(counts, main="Car Distribution", horiz = T,
xlab="Number of Gears")
dev.off
dev.off()
png("simple_barplots.png")
counts <- table(mtcars$gear)
par(mfrow=c(1,2))
barplot(counts, main = "Car Distribution",xlab="Gear Number")
barplot(counts, main = "Car Distribution",xlab="Gear Number",horiz= T)
dev.off()
rm(list=ls())
mtcars$vs
?mtcars
png("stacked_barplot.png")
couts <- table(mtcars$vs, mtcars$gear)
barplot(couts, main = " Car Distribution by Gear and VS",xlab="Number of Gears",)
dev.off
dev.off()
counts <- table(mtcars$vs, mtcars$gear)
png("stacked_barplot.png")
barplot(counts,main = "Car Distrubution by Gear and VS",xlab= "Number of Gears",col=c("darkblue","red"),legend = row.names(couts))
dev.off()
png("groped_barplot.png")
count <- table(mtcars$gear,mtcars$vs)
barplot(count, main = "Car distribution by year and VS",xlab="Number of Gears",beside = T,col = c("darkblue","red"),legend = rownames(count))
dev.off()
png("groped_barplot.png")
# Grouped Bar Plot
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
dev.off()
?agreggate
?aggregate()
library(robustbase)
aggregate(Animals2)
aggregate(Animals2,FUN = mean())
aggregate(Animals2,FUN = mean)
aggregate(Animals2$body)
aggregate(Animals2$body,FUN=mean)
aggregate(Animals2$body,FUN=mean,by=body)
aggregate(Animals2$body,FUN=mean)
aggregate(Animals2$body,FUN=mean,by=Animals2$body)
?tapply
setwd("worms_data/")
my.data= read.table("clipboard", head =T)
my.data= read.table("clipboard", head =T)  # code for reading in data see our R videos #2 and #3
attach(my.data)
rm(list=ls())
colors("red"-"blue")
colors()
colours()
x <- 1:200
y <- x^2
plot(x,y, col = 432)
plot(x,y, col = rgb(red = 200,blue = 300,green = 190))
plot(x,y, col = rgb(red = 200,blue = 100,green = 190))
plot(x,y, col = rgb(red = 100,blue = 100,green = 1000))
plot(x,y, col = rgb(red = 0.2 ,blue = 0.9,green = 0.5))
dev.off()
plot(x,y, col = rgb(red = 0.2 ,blue = 0.9,green = 0.5))
plot(x,y, col = rgb(red = 0.2 ,blue = 0.9,green = 0.5),pch=17)
plot(x,y, col = rgb(red = 0.2 ,blue = 0.9,green = 0.9),pch=17)
plot(x,y, col = rgb(red = 0.2 ,blue = 0.4,green = 0.9),pch=17)
plot(x,y, col = rgb(red = 0.12 ,blue = 0.4,green = 0.9),pch=17)
plot(x,y, col = rgb(red = 0.99 ,blue = 0.4,green = 0.9),pch=17)
plot(x,y, col = rgb(red = 0.99 ,blue = 0.99,green = 0.99),pch=17)
?rgb
ramp <- colorRamp(c("red", "white"))
rgb( ramp(seq(0, 1, length = 5)), max = 255)
plot(x,y, col = c(ramp <- colorRamp(c("red", "white"))
rgb( ramp(seq(0, 1, length = 5)), max = 255)
) ,pch=17)
